---
- name: Query cluster control node status
  hosts: "{{ rke_control_group }}"
  vars_files:
    - main.yml
  tasks:
    - name: Register cluster nembers
      tags: always
      block:
        - name: Query cluster nodes
          kubernetes.core.k8s_info:
            kind: Node
          register: k8s_nodes_info

        - name: Register cluster nodes
          ansible.builtin.set_fact:
            _cluster_nodes: "{{ k8s_nodes_info.resources | map(attribute='metadata.name') }}"
          delegate_to: localhost
          delegate_facts: true

    - name: Register healthy cluster master nodes
      tags: always
      block:
        - name: Query cluster master nodes
          kubernetes.core.k8s_info:
            kind: Node
            label_selectors:
              - node-role.kubernetes.io/controlplane=true
          register: k8s_nodes_info

        - name: Create healthy cluster master group
          ansible.builtin.add_host:
            hostname: "{{ item }}"
            groups:
              - rke_play_master_hosts
          vars:
            _rke_node: "{{ k8s_nodes_info.resources | selectattr('metadata.name', 'equalto', item) | list }}"
            _rke_node_conditions: "{{ _rke_node | map(attribute='status.conditions') | flatten }}"
            _rke_node_ready: "{{ _rke_node_conditions | selectattr('type', 'equalto', 'Ready') }}"
            _rke_node_healthy: "{{ _rke_node_ready | selectattr('status', 'equalto', 'True') | length > 0 }}"
            _rke_master_healthy: "{{ 'true' if _rke_node_healthy else 'false' }}"
          loop: "{{ ansible_play_hosts }}"
          when: _rke_master_healthy | bool


- name: Update OS on cluster members
  hosts: "{{ rke_worker_group }}:{{ rke_control_group }}"
  serial: 1
  vars_files:
    - main.yml
  vars:
    _rke_cluster_nodes: "{{ hostvars['localhost']['_cluster_nodes'] }}"
    _rke_play_master: "{{ groups['rke_play_master_hosts'] | last }}"
    _rke_play_standby: "{{ groups['rke_play_master_hosts'] | first }}"
    _rke_hostname: "{{ inventory_hostname }}"
  tasks:
    - name: Skip unregistered host
      ansible.builtin.meta: end_host
      when: _rke_hostname not in _rke_cluster_nodes

    - name: Cordon cluster node
      delegate_to: "{{ _rke_play_master }}"
      block:
        - name: Wait for pods to be in a running state
          kubernetes.core.k8s_info:
            kind: Pod
          vars:
            _k8s_pod_resources: "{{ k8s_pod_info.resources | list }}"
            _k8s_pod_status: "{{ _k8s_pod_resources | map(attribute='status') }}"
            _k8s_pod_phases: "{{ _k8s_pod_status | selectattr('phase', 'defined') }}"
            _k8s_pod_running: "{{ _k8s_pod_phases | selectattr('phase', 'equalto', 'Running') }}"
            _k8s_pod_conditions: "{{ _k8s_pod_running | map(attribute='conditions') | flatten }}"
            _k8s_pod_containers: "{{ _k8s_pod_conditions | selectattr('type', 'equalto', 'ContainersReady') }}"
            _k8s_pod_falsestatus: "{{ _k8s_pod_containers | selectattr('status', 'equalto', 'False') }}"
            _k8s_pod_reasons: "{{ _k8s_pod_falsestatus | selectattr('reason', 'defined') }}"
            _k8s_pod_filter: "{{ _k8s_pod_reasons | selectattr('reason', 'equalto', 'ContainersNotReady') }}"
          register: k8s_pod_info
          retries: 30
          delay: 10
          until: _k8s_pod_filter | length == 0

        - name: Drain cluster node
          block:
            - name: Attempt safe cluster node drain
              kubernetes.core.k8s_drain:
                name: "{{ _rke_hostname }}"
                state: drain
                delete_options:
                  delete_emptydir_data: true
                  ignore_daemonsets: true
                  force: true
                  wait_sleep: 10
                  wait_timeout: 300

          rescue:
            - name: Force cluster node drain
              ansible.builtin.shell: |
                kubectl drain {{ _rke_hostname }} \
                  --delete-emptydir-data=true \
                  --force=true \
                  --ignore-daemonsets=true \
                  --timeout=300s

        - name: Query cluster node status
          kubernetes.core.k8s_info:
            kind: Node
          register: k8s_node_info

        - name: Verify cluster node cordon status
          ansible.builtin.fail:
            msg: "cluster node is not cordoned"
          vars:
            _hostname: "{{ _rke_hostname }}"
            _k8s_node_resources: "{{ k8s_node_info.resources | list }}"
            _k8s_node_filter: "{{ _k8s_node_resources | selectattr('metadata.name', 'equalto', _hostname) }}"
            _k8s_node_spec: "{{ _k8s_node_filter | map(attribute='spec') | list }}"
            _k8s_node_cordoned: "{{ _k8s_node_spec | selectattr('unschedulable', 'defined') }}"
          when: _k8s_node_cordoned | length == 0

    - name: Upgrade cluster nodes
      become: true
      block:
        - name: Upgrade cluster node
          ansible.builtin.include_role:
            name: nephelaiio.rke.update
          vars:
            update_reboot: false

        - name: Flush handlers
          ansible.builtin.meta: flush_handlers

        - name: Reboot node
          ansible.builtin.reboot:

    - name: Uncordon cluster node
      delegate_to: "{{ _rke_play_master if _rke_play_master != _rke_hostname else _rke_play_standby }}"
      block:
        - name: Wait for cluster node to be ready
          kubernetes.core.k8s_info:
            kind: Node
          vars:
            _hostname: "{{ _rke_hostname }}"
            _k8s_node_info: "{{ [] if not 'resources' in k8s_node_info else k8s_node_info.resources }}"
            _k8s_node_resources: "{{ _k8s_node_info | list }}"
            _k8s_node_filter: "{{ _k8s_node_resources | selectattr('metadata.name', 'equalto', _hostname) }}"
            _k8s_node_status: "{{ _k8s_node_filter | map(attribute='status') }}"
            _k8s_node_conditions: "{{ _k8s_node_status | list | map(attribute='conditions') | flatten }}"
          register: k8s_node_info
          retries: 20
          delay: 5
          until:
            - _k8s_node_status | length > 0
            - _k8s_node_conditions | selectattr('type', 'equalto', 'Ready') | length > 0

        - name: Uncordon cluster node
          kubernetes.core.k8s_drain:
            name: "{{ _rke_hostname }}"
            state: uncordon
          register: rke_uncordon
          delegate_to: "{{ _rke_play_master }}"

        - name: Wait for cluster node to be schedulable
          kubernetes.core.k8s_info:
            kind: Node
          vars:
            _hostname: "{{ _rke_hostname }}"
            _k8s_node_resources: "{{ k8s_node_info.resources | list }}"
            _k8s_node_filter: "{{ _k8s_node_resources | selectattr('metadata.name', 'equalto', _hostname) }}"
            _k8s_node_spec: "{{ _k8s_node_filter | map(attribute='spec') | list }}"
            _k8s_node_cordoned: "{{ _k8s_node_spec | selectattr('unschedulable', 'defined') }}"
          register: k8s_node_info
          delegate_to: "{{ _rke_play_master }}"
          retries: 20
          delay: 5
          until:
            - _k8s_node_spec | length > 0
            - _k8s_node_cordoned | length == 0

        - name: Wait for pods to be created
          ansible.builtin.pause:
            seconds: 60

        - name: Wait for pods to be running
          kubernetes.core.k8s_info:
            kind: Pod
          vars:
            _hostname: "{{ _rke_hostname }}"
            _k8s_pod_resources: "{{ k8s_pod_info.resources | list }}"
            _k8s_node_resources: "{{ _k8s_pod_resources | selectattr('spec.nodeName', 'defined') }}"
            _k8s_node_filter: "{{ _k8s_node_resources | selectattr('spec.nodeName', 'equalto', _hostname) }}"
            _k8s_pod_node: "{{ _k8s_node_filter | list }}"
            _k8s_pod_status: "{{ _k8s_pod_node | map(attribute='status') | selectattr('phase', 'defined') }}"
            _k8s_pod_running: "{{ _k8s_pod_status | selectattr('phase', 'equalto', 'Running') }}"
            _k8s_pod_containers: "{{ _k8s_pod_running | map(attribute='conditions') | flatten }}"
            _k8s_pod_ready: "{{ _k8s_pod_containers | selectattr('type', 'equalto', 'ContainersReady') }}"
            _k8s_pod_failed: "{{ _k8s_pod_containers | selectattr('status', 'equalto', 'False') }}"
            _k8s_pod_faled_reason: "{{ _k8s_pod_failed | selectattr('reason', 'defined') }}"
            _k8s_pod_notready: "{{ _k8s_pod_failed | selectattr('reason', 'equalto', 'ContainersNotReady') }}"
          register: k8s_pod_info
          retries: 30
          delay: 10
          until: _k8s_pod_notready | length == 0
          delegate_to: "{{ _rke_play_master }}"
