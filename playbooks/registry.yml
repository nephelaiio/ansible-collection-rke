---
- name: Deploy Registry Helm chart
  hosts: "{{ rke_control_group }}"
  vars_files:
    - main.yml
  vars:
    rke_registry_namespace: "docker-registry"
    rke_registry_size: "10Gi"
    rke_registry_chart_name: "docker-registry"
    rke_registry_chart_repo: "https://helm.twun.io"
    rke_registry_chart_timeout: 600
    rke_registry_proxy_retries: 10
    rke_registry_proxy_wait_time: 60
  tasks:
    - name: Set environment facts
      ansible.builtin.set_fact:
        _rke_registry_deploy: "{{ rke_registry_deploy | default(false) }}"

    - name: End play if registry deployment is disabled
      ansible.builtin.meta: end_play
      when: not _rke_registry_deploy

    - name: Slurp kubeconfig file
      ansible.builtin.slurp:
        src: "{{ _rke_config_user }}"
      register: _kubeconfig_slurp

    - name: Deploy k8s components
      run_once: true
      delegate_to: localhost
      block:
        - name: Create kubeconfig tempdir
          ansible.builtin.tempfile:
            state: directory
            prefix: kubeconfig
          register: kubeconfig_tmpdir
          changed_when: false

        - name: Set kubeconfig facts
          ansible.builtin.set_fact:
            k8s_kubeconfig: "{{ kubeconfig_tmpdir.path }}/config"

        - name: Create local kubeconfig
          ansible.builtin.copy:
            dest: "{{ k8s_kubeconfig }}"
            content: "{{ _kubeconfig_slurp['content'] | b64decode }}"
            mode: 0600
          changed_when: false

        - name: Deploy Registry Helm chart
          kubernetes.core.helm:
            name: "{{ rke_registry_chart_name }}"
            kubeconfig: "{{ k8s_kubeconfig | default(omit) }}"
            chart_ref: "{{ rke_registry_chart_name }}"
            chart_repo_url: "{{ rke_registry_chart_repo }}"
            release_namespace: "{{ rke_registry_namespace }}"
            create_namespace: true
            state: present
            wait: true
            wait_timeout: "{{ rke_registry_chart_timeout }}s"
            binary_path: "{{ rke_k8s_helm_bin }}"
            values:
              persistence:
                enabled: true
                size: "{{ rke_registry_size }}"
              service:
                type: NodePort
                nodePort: "{{ _rke_registry_port }}"
              proxy:
                enabled: true

      always:
        - name: Remove kubeconfig tempdir
          ansible.builtin.file:
            dest: "{{ kubeconfig_tmpdir }}"
            state: absent
          changed_when: false

- name: Configure Docker daemon to use proxy cache
  hosts: "{{ rke_control_group }}:{{ rke_worker_group }}"
  vars_files:
    - main.yml
  vars:
    docker_daemon_config_path: "/etc/docker/daemon.json"
    docker_service_name: "docker.service"
  tasks:
    - name: Set environment facts
      ansible.builtin.set_fact:
        _rke_registry_deploy: "{{ rke_registry_deploy | default(false) }}"

    - name: End play if proxy configuration is disabled
      ansible.builtin.meta: end_play
      when: not _rke_registry_deploy rke_docker_proxy is not defined

    - name: Verify configuration parameters
      ansible.builtin.assert:
        that: not ((_rke_registry_deploy | bool) and (rke_docker_proxy is defined))
        fail_msg: "Parameters rke_registry_deploy and rke_docker_proxy are mutually exclusive"

    - name: Set configuration facts
      ansible.builtin.set_fact:
        _rke_docker_proxy: "{{ rke_docker_proxy | default(_rke_registry_proxy) }}"
      vars:
        _rke_registry_proxy: "http://localhost:{{ _rke_registry_port }}"

    - name: Check if daemon.json exists
      ansible.builtin.stat:
        path: "{{ docker_daemon_config_path }}"
      register: docker_daemon_stat
      become: true

    - name: Read existing daemon.json if it exists
      ansible.builtin.slurp:
        src: "{{ docker_daemon_config_path }}"
      register: docker_daemon_content
      become: true
      when: docker_daemon_stat.stat.exists

    - name: Parse existing daemon.json or create empty config
      ansible.builtin.set_fact:
        docker_daemon_config: "{{ (docker_daemon_content.content | b64decode | from_json) if docker_daemon_stat.stat.exists else {} }}"

    - name: Update Docker daemon configuration with registry mirror
      ansible.builtin.set_fact:
        docker_daemon_config: "{{ docker_daemon_config | combine(docker_config_override) }}"
      vars:
        docker_config_override:
          registry-mirrors:
            - "{{ _rke_docker_proxy }}"
          insecure-registries:
            - "{{ _rke_docker_proxy | urlsplit('hostname') }}"

    - name: Ensure /etc/docker directory exists
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        mode: "0755"
      become: true

    - name: Write updated Docker daemon configuration
      ansible.builtin.copy:
        content: "{{ docker_daemon_config | to_nice_json }}"
        dest: "{{ docker_daemon_config_path }}"
        mode: "0644"
      become: true

    - name: Reload Docker configuration
      ansible.builtin.systemd:
        name: "{{ docker_service_name }}"
        state: reloaded
      become: true

    - name: Verify Docker can pull from registry proxy
      ansible.builtin.command: "docker pull hello-world:latest"
      become: true
      register: test_pull
      changed_when: false
      ignore_errors: true

    - name: Display test pull result
      ansible.builtin.debug:
        var: test_pull.stdout_lines
      when: test_pull is not failed

    - name: Display pull error if any
      ansible.builtin.debug:
        var: test_pull.stderr_lines
      when: test_pull is failed
