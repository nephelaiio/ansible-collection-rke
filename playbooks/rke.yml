---
- name: Install RKE binary
  hosts: "{{ rke_control_group }}"
  vars_files:
    - main.yml
  tasks:
    - name: Debug rke install target
      ansible.builtin.debug:
        msg: |
          rke={{ _rke_release_rke }}, k8s={{ _rke_release_k8s }}, docker={{ _rke_release_docker }}
      run_once: true

    - name: Set install facts
      ansible.builtin.set_fact:
        _install_root: "{{ rke_install_root }}"
        _install_user: "{{ rke_install_user }}"

    - name: Create cluster directory structure
      ansible.builtin.file:
        state: directory
        path: "{{ _install_root }}"
        owner: "{{ _install_user }}"
        mode: 0750
      become: true

    - name: Deploy RKE binary
      ansible.builtin.get_url:
        url: "https://github.com/rancher/rke/releases/download/{{ _rke_release_rke }}/rke_linux-amd64"
        dest: "{{ rke_bin_rke }}"
        mode: 0755
        owner: root
        group: root
      become: true

    - name: Build RKE cluster file
      ansible.builtin.template:
        src: cluster.j2.yml
        dest: "{{ _install_root }}/cluster.yml"
        owner: "{{ _install_user }}"
        mode: 0600
      vars:
        _cluster_name: "{{ rke_cluster_name }}"
        _iface_name: "{{ ansible_default_ipv4.interface }}"
        _control_hosts: "{{ rke_control_hosts }}"
        _worker_hosts: "{{ rke_worker_hosts }}"
        _provider: "{{ rke_cloud_provider | default('onpremise') }}"
        _api_url: "{{ [] if (rke_api_url is not defined) else [rke_api_url | urlsplit('hostname')] }}"
        _k8s_release: "{{ _rke_release_k8s }}"
        _backup_interval: "{{ _rke_backup_interval }}"
        _backup_retention: "{{ _rke_backup_retention }}"

    - name: Stat cluster state file
      ansible.builtin.stat:
        path: "{{ rke_state_file }}"
      register: check_rkestate

    - name: Group deployed hosts
      ansible.builtin.group_by:
        key: "_rke_{{ 'installed' if (check_rkestate.stat.exists | bool) else 'uninstalled' }}"


- name: Deploy RKE cluster
  hosts: "{{ _targets | first }}"
  vars_files:
    - main.yml
  vars:
    _all: "{{ groups[rke_control_group] }}"
    _installed: "{{ groups['_rke_installed'] | default([]) }}"
    _uninstalled: "{{ groups['_rke_uninstalled'] | default([]) }}"
    _targets: "{{ (_installed | length > 0) | ternary(_installed, _uninstalled) }}"
    _timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
    _log: "{{ rke_install_log }}.{{ _timestamp }}"
    _state_backup: "{{ rke_state_file }}.{{ _timestamp }}"
    _config_install_backup: "{{ _rke_config_install }}.{{ _timestamp }}"
  tasks:
    - name: Stat cluster state file
      ansible.builtin.stat:
        path: "{{ rke_state_file }}"
      register: _rke_state_start

    - name: Backup cluster state
      ansible.builtin.copy:
        src: "{{ rke_state_file }}"
        dest: "{{ _state_backup }}"
        remote_src: true
      when: _rke_state_start.stat.exists
      changed_when: false

    - name: Stat install kubeconfig
      ansible.builtin.stat:
        path: "{{ _rke_config_install }}"
      register: _rke_config_start

    - name: Backup install kubeconfig
      ansible.builtin.copy:
        src: "{{ _rke_config_install }}"
        dest: "{{ _config_install_backup }}"
        remote_src: true
      when: _rke_config_start.stat.exists
      changed_when: false

    - name: Deploy/Update RKE cluster
      ansible.builtin.shell:
        cmd: "{{ rke_bin_rke }} up > {{ _log }}"
        chdir: "{{ rke_install_root }}"
      retries: "{{ _rke_retry_num }}"
      delay: "{{ _rke_retry_delay }}"
      register: rke_deploy_result
      until: rke_deploy_result.rc == 0

    - name: Stat cluster state file
      ansible.builtin.stat:
        path: "{{ rke_state_file }}"
      register: _rke_state_end

    - name: Destroy kubeconfig backup
      ansible.builtin.file:
        path: "{{ _state_backup }}"
        state: absent
      when:
        - _rke_state_start.stat.exists
        - _rke_state_start.stat.checksum == _rke_state_end.stat.checksum
      changed_when: false

    - name: Stat install kubeconfig
      ansible.builtin.stat:
        path: "{{ _rke_config_install }}"
      register: _rke_config_end

    - name: Destroy cluster state backup
      ansible.builtin.file:
        path: "{{ _install_config_backup }}"
        state: absent
      when:
        - _rke_config_start.stat.exists
        - _rke_config_start.stat.checksum == _rke_config_end.stat.checksum
      changed_when: false

    - name: Distribute cluster install log
      ansible.posix.synchronize:
        mode: pull
        src: "{{ _log }}"
        dest: "{{ _log }}"
      loop: "{{ _all }}"
      delegate_to: "{{ item }}"

    - name: Distribute cluster state file
      ansible.posix.synchronize:
        mode: pull
        src: "{{ rke_state_file }}"
        dest: "{{ rke_state_file }}"
        archive: true
      loop: "{{ _all }}"
      delegate_to: "{{ item }}"

    - name: Distribute cluster state backup
      ansible.posix.synchronize:
        mode: pull
        src: "{{ _state_backup }}"
        dest: "{{ _state_backup }}"
        archive: true
      loop: "{{ _all }}"
      delegate_to: "{{ item }}"

    - name: Slurp kube configfile
      ansible.builtin.slurp:
        src: "{{ _rke_config_install }}"
      register: _kubeconfig_slurp

    - name: Set cluster facts
      ansible.builtin.set_fact:
        _rke_kubeconfig_content: "{{ _kubeconfig_slurp['content'] | b64decode | ansible.builtin.from_yaml }}"
      delegate_to: localhost
      delegate_facts: true

    - name: Patch install kubeconfig
      ansible.builtin.copy:
        dest: "{{ _rke_config_install }}"
        content: "{{ _install_patch | ansible.builtin.to_nice_yaml(indent=2) }}"
        backup: true
        mode: 0600
      vars:
        _install_config: "{{ _kubeconfig_slurp['content'] | b64decode | ansible.builtin.from_yaml }}"
        _install_server: "{{ _install_config.clusters[0].cluster.server }}"
        _install_override:
          cluster:
            server: 'https://localhost:6443'
        _install_cluster:
          clusters:
            - "{{ _install_config['clusters'][0] | ansible.builtin.combine(_install_override, recursive=true) }}"
        _install_patch: "{{ _install_config | ansible.builtin.combine(_install_cluster) }}"

    - name: Distribute install kubeconfig
      ansible.posix.synchronize:
        mode: pull
        src: "{{ _rke_config_install }}"
        dest: "{{ _rke_config_install }}"
        archive: true
      loop: "{{ _all }}"
      delegate_to: "{{ item }}"


- name: Distribute cluster files to control nodes
  hosts: "{{ rke_control_group }}"
  vars_files:
    - main.yml
  tasks:
    - name: Initialize kubeconfig facts
      ansible.builtin.set_fact:
        _kubeconfig_user: "{{ _install_config | ansible.builtin.combine(_user_cluster) }}"
      vars:
        _install_config: "{{ hostvars['localhost']['_rke_kubeconfig_content'] }}"
        _install_server: "{{ _install_config.clusters[0].cluster.server }}"
        _user_override:
          cluster:
            server: "{{ _install_server if (rke_api_url is not defined) else rke_api_url }}"
        _user_cluster:
          clusters:
            - "{{ _install_config['clusters'][0] | ansible.builtin.combine(_user_override, recursive=true) }}"

    - name: Debug kubeconfig user configuration
      ansible.builtin.debug:
        msg: "Distributing user kubeconfig with api server {{ _kubeconfig_server }}"
      vars:
        _kubeconfig_server: "{{ _kubeconfig_user.clusters[0].cluster.server }}"

    - name: Create kubeconfig user directory
      ansible.builtin.file:
        path: "{{ _rke_config_user | dirname }}"
        state: directory
        mode: 0750

    - name: Distribute user kubeconfig
      ansible.builtin.copy:
        dest: "{{ _rke_config_user }}"
        content: "{{ _kubeconfig_user | ansible.builtin.to_nice_yaml(indent=2) }}"
        mode: 0600

    - name: Wait for cluster startup
      ansible.builtin.command:
        cmd: kubectl get nodes
      register: _kubectl_query
      retries: "{{ _rke_retry_num }}"
      delay: "{{ _rke_retry_delay }}"
      until: _kubectl_query is succeeded
