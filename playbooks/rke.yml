---
- name: Install RKE binary
  hosts: "{{ rke_control_group }}"
  vars_files:
    - main.yml
  tasks:
    - name: Debug rke install target
      ansible.builtin.debug:
        msg: |
          rke={{ _rke_release_rke }}, k8s={{ _rke_release_k8s }}, docker={{ _rke_release_docker }}
      run_once: true

    - name: Set install facts
      ansible.builtin.set_fact:
        _install_root: "{{ rke_install_root }}"
        _install_user: "{{ rke_install_user }}"

    - name: Create cluster directory structure
      ansible.builtin.file:
        state: directory
        path: "{{ _install_root }}"
        owner: "{{ _install_user }}"
        mode: 0750
      become: true

    - name: Deploy RKE binary
      ansible.builtin.get_url:
        url: "https://github.com/rancher/rke/releases/download/{{ _rke_release_rke }}/rke_linux-amd64"
        dest: "{{ rke_bin_rke }}"
        mode: 0755
        owner: root
        group: root
      become: true

    - name: Build RKE cluster file
      ansible.builtin.template:
        src: cluster.j2.yml
        dest: "{{ _install_root }}/cluster.yml"
        owner: "{{ _install_user }}"
        mode: 0600
      vars:
        _cluster_name: "{{ rke_cluster_name }}"
        _iface_name: "{{ ansible_default_ipv4.interface }}"
        _control_hosts: "{{ rke_control_hosts }}"
        _worker_hosts: "{{ rke_worker_hosts }}"
        _provider: "{{ rke_cloud_provider | default('onpremise') }}"
        _api_url: "{{ _rke_api_url | urlsplit('hostname') }}"
        _k8s_release: "{{ _rke_release_k8s }}"

    - name: Stat cluster state file
      ansible.builtin.stat:
        path: "{{ rke_state_file }}"
      register: check_rkestate

    - name: Group deployed hosts
      ansible.builtin.group_by:
        key: "_rke_{{ 'installed' if (check_rkestate.stat.exists | bool) else 'uninstalled' }}"


- name: Deploy RKE cluster
  hosts: "{{ _targets | first }}"
  vars_files:
    - main.yml
  vars:
    _installed: "{{ groups['_rke_installed'] | default([]) }}"
    _uninstalled: "{{ groups['_rke_uninstalled'] | default([]) }}"
    _targets: "{{ (_installed | length > 0) | ternary(_installed, _uninstalled) }}"
  tasks:
    - name: Deploy/Update RKE cluster
      ansible.builtin.command:
        cmd: "{{ rke_bin_rke }} up"
        chdir: "{{ rke_install_root }}"
      retries: "{{ _rke_retry_num }}"
      delay: "{{ _rke_retry_delay }}"
      register: rke_deploy_result
      until: rke_deploy_result.rc == 0

    - name: Slurp kube config file
      ansible.builtin.slurp:
        src: "{{ _rke_config_install }}"
      register: _kubeconfig_slurp

    - name: Slurp cluster state file
      ansible.builtin.slurp:
        src: "{{ rke_state_file }}"
      register: _clusterstate_slurp

    - name: Set cluster facts
      ansible.builtin.set_fact:
        _rke_kubeconfig_content: "{{ _kubeconfig_slurp['content'] | b64decode }}"
        _rke_clusterstate_content: "{{ _clusterstate_slurp['content'] | b64decode }}"
      delegate_to: localhost
      delegate_facts: true


- name: Distribute cluster files to control nodes
  hosts: "{{ rke_control_group }}"
  vars_files:
    - main.yml
  tasks:
    - name: Initialize kubeconfig facts
      ansible.builtin.set_fact:
        _kubeconfig_content: "{{ _kubeconfig_base | ansible.builtin.combine(_kubeconfig_cluster) }}"
        _clusterstate_content: "{{ hostvars['localhost']['_rke_clusterstate_content'] }}"
      vars:
        _kubeconfig_base: "{{ hostvars['localhost']['_rke_kubeconfig_content'] | ansible.builtin.from_yaml }}"
        _kubeconfig_server:
          server: "{{ _rke_api_url if _rke_api_set else _kubeconfig_base.clusters[0].cluster.server }}"
        _kubeconfig_cluster:
          clusters:
            - "{{ _kubeconfig_base['clusters'][0] | ansible.builtin.combine(_kubeconfig_server) }}"

    - name: Distribute install kubeconfig to all nodes
      ansible.builtin.copy:
        dest: "{{ _rke_config_install }}"
        content: "{{ _kubeconfig_content | ansible.builtin.to_nice_yaml(indent=2) }}"
        backup: true
        mode: 0600

    - name: Create kubeconfig user directory
      ansible.builtin.file:
        path: "{{ _rke_config_user | dirname }}"
        state: directory
        mode: 0750

    - name: Distribute user kubeconfig to all nodes
      ansible.builtin.copy:
        dest: "{{ _rke_config_user }}"
        content: "{{ _kubeconfig_content }}"
        mode: 0600

    - name: Distribute cluster state to all nodes
      ansible.builtin.copy:
        dest: "{{ rke_state_file }}"
        content: "{{ _clusterstate_content }}"
        mode: 0600

    - name: Wait for cluster startup
      ansible.builtin.command:
        cmd: kubectl get nodes
      register: _kubectl_query
      retries: "{{ _rke_retry_num }}"
      delay: "{{ _rke_retry_delay }}"
      until: _kubectl_query is succeeded
