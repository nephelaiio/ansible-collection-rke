---
dependency:
  name: galaxy
  options:
    role-file: requirements.yml
    requirements-file: requirements.yml
driver:
  name: default
platforms:
  - name: rke-install-control-01
    image: "${MOLECULE_KVM_IMAGE}"
    groups:
      - rke_control
      - rke
  - name: rke-install-control-02
    image: "${MOLECULE_KVM_IMAGE}"
    groups:
      - rke_control
      - rke
  - name: rke-install-control-03
    image: "${MOLECULE_KVM_IMAGE}"
    groups:
      - rke_control
      - rke
  - name: rke-install-worker-01
    image: "${MOLECULE_KVM_IMAGE}"
    groups:
      - rke_worker
      - rke
  - name: rke-install-worker-02
    image: "${MOLECULE_KVM_IMAGE}"
    groups:
      - rke_worker
      - rke
  - name: rke-install-worker-03
    image: "${MOLECULE_KVM_IMAGE}"
    groups:
      - rke_worker
      - rke
provisioner:
  name: ansible
  playbooks:
    create: ../common/create.yml
    prepare: ../common/prepare.yml
    converge: ../common/install.yml
    side_effect: ../common/k8s.yml
    verify: ../common/verify.yml
    cleanup: ../common/cleanup.yml
    destroy: ../common/destroy.yml
  config_options:
    defaults:
      callbacks_enabled: ansible.posix.profile_tasks
      callback_whitelist: profile_tasks, timer, yaml
  inventory:
    hosts:
      all:
        vars:
          molecule_libvirt_address: '172.31.255.1/24'
          molecule_libvirt_prefix: "{{ molecule_libvirt_address | ansible.utils.ipaddr('prefix') }}"
          molecule_rke_prefix: "{{ (molecule_libvirt_prefix | int) + 1 }}"
          molecule_mlb_prefix: "{{ (molecule_rke_prefix | int) + 1 }}"
          molecule_dhcp: "{{ molecule_libvirt_address | ansible.utils.ipsubnet(molecule_rke_prefix, 0) }}"
          molecule_metallb: "{{ molecule_libvirt_address | ansible.utils.ipsubnet(molecule_rke_prefix, 1) }}"
          molecule_libvirt_dhcp: "{{ molecule_dhcp }}"
          molecule_install_dir: "{{ lookup('env', 'MOLECULE_OUTPUT_DIR', default='/tmp/logs') }}"
          molecule_install_log: "{{ molecule_install_dir }}/${MOLECULE_SCENARIO_NAME}.log"
          rke_ssh_key: "/tmp/id_rsa"
          k8s_certmanager_issuer_name: local
          # Required k8s params
          rke_cluster_name: rke.nephelaiio.io
          rke_address_pool_private: "{{ molecule_metallb | ansible.utils.ipsubnet(molecule_mlb_prefix, 1)}}"
          rke_metallb_speaker_secret: secret
          # Optional k8s params
          rke_k8s_opensearch_deploy: false
verifier:
  name: ansible
scenario:
  prepare_sequence:
    - prepare
  converge_sequence:
    - converge
  destroy_sequence:
    - destroy
  cleanup_sequence:
    - cleanup
  test_sequence:
    - dependency
    - create
    - prepare
    - converge
    - side_effect
    - verify
