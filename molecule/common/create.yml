---
- name: Configure KVM host
  hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    - name: Install package requirements
      ansible.builtin.package:
        name: xorriso
      become: true

    - name: Query libvirt pool info
      ansible.builtin.shell:
        cmd: "virsh pool-dumpxml {{ _pool_name }}"
        executable: /bin/bash
      register: pool_query

    - name: Set libvirt pool facts
      ansible.builtin.set_fact:
        _pool: "{{ _pool_info.pool.target.path }}"
      vars:
        _pool_info: "{{ pool_query.stdout | ansible.utils.from_xml }}"

    - name: Add libvirt network
      community.libvirt.virt_net:
        command: define
        name: "{{ _network }}"
        xml: "{{ lookup('template', 'network.xml.j2') }}"
      vars:
        _net_address: "{{ _address | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
        _net_mask: "{{ _address | ansible.utils.ipaddr('netmask') }}"
        _net_dhcp_start: "{{ _address | ansible.utils.ipaddr('2') | ansible.utils.ipaddr('address') }}"
        _net_dhcp_end: "{{ _address | ansible.utils.ipaddr('-2') | ansible.utils.ipaddr('address') }}"
      when: _network != "default"

    - name: Start libvirt network
      community.libvirt.virt_net:
        command: create
        name: "{{ _network }}"
      when: _network != "default"

    - name: List cached images
      ansible.builtin.find:
        paths: "{{ _pool }}"
        recurse: false
      register: _cache_query
      become: true

    - name: Inspect cached images
      ansible.builtin.set_fact:
        _uncached_images: "{{ (_uncached_images | default([])) + [item] }}"
      vars:
        _cached_images: "{{ _cache_query.files | map(attribute='path') }}"
        _basename: "{{ item | urlsplit('path') | basename }}"
        _path: "{{ _pool }}/{{ _basename }}"
      loop: "{{ molecule_yml.platforms | map(attribute='image') | unique }}"
      when: _path not in _cached_images

    - name: Cache platform images
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ _path }}"
        owner: root
        group: root
        mode: 0600
      vars:
        _basename: "{{ item | urlsplit('path') | basename }}"
        _path: "{{ _pool }}/{{ _basename }}"
      loop: "{{ _uncached_images | default([]) }}"
      become: true


- name: Create KVM guests
  hosts: all
  gather_facts: false
  vars_files:
    - vars.yml
  tasks:
    - name: Create KVM guest
      delegate_to: localhost
      block:
        - name: Create ssh key
          community.crypto.openssh_keypair:
            path: "{{ lookup('ansible.builtin.env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/id_rsa"
          run_once: true
          register: _pubkey

        - name: Query active KVM guests
          ansible.builtin.command: virsh list --name
          run_once: true
          register: guest_query

        - name: Query libvirt pool info
          ansible.builtin.shell:
            cmd: "virsh pool-dumpxml {{ _pool_name }}"
            executable: /bin/bash
          run_once: true
          register: pool_query

        - name: Set libvirt pool facts
          ansible.builtin.set_fact:
            _pool: "{{ _pool_info.pool.target.path }}"
          vars:
            _pool_info: "{{ pool_query.stdout | ansible.utils.from_xml }}"

        - name: Manage KVM guests
          when: inventory_hostname not in guest_query.stdout_lines
          block:

            - name: Create KVM guest disks
              ansible.builtin.copy:
                remote_src: true
                src: "{{ _pool }}/{{ _platform.image | urlsplit('path') | basename }}"
                dest: "{{ _disk }}"
                owner: libvirt-qemu
                group: kvm
                mode: 0666
                force: true
              vars:
                _platform: "{{ molecule_yml.platforms | selectattr('name', 'equalto', inventory_hostname) | first }}"
                _disk: "{{ _pool }}/{{ _platform.name }}.img"
              become: true

            - name: Resize KVM guest disks
              ansible.builtin.command:
                cmd: qemu-img resize {{ _disk }} {{ _platform.size | default('20G') }}
              vars:
                _platform: "{{ molecule_yml.platforms | selectattr('name', 'equalto', inventory_hostname) | first }}"
                _disk: "{{ _pool }}/{{ _platform.name }}.img"
              become: true

            - name: Create cloud-init tempdir
              ansible.builtin.tempfile:
                state: directory
                prefix: libvirt
              register: libvirt_tmpdir
              run_once: true

            - name: Create KVM guest
              become: true
              block:
                - name: Create instance tempdir
                  ansible.builtin.file:
                    dest: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}"
                    state: directory

                - name: Create cloud-init meta data
                  ansible.builtin.template:
                    src: "meta-data.yml.j2"
                    dest: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}/meta-data"

                - name: Create cloud-init user data
                  ansible.builtin.template:
                    src: "user-data.yml.j2"
                    dest: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}/user-data"
                  vars:
                    guest_user: "{{ _user }}"
                    guest_key: "{{ _pubkey.public_key }}"

                - name: Create cloud-init iso
                  ansible.builtin.command:
                    cmd: |
                      xorriso -as mkisofs
                      -volid cidata -joliet -rock
                      -o {{ _pool }}/{{ inventory_hostname }}.iso .
                    chdir: "{{ libvirt_tmpdir.path }}/{{ inventory_hostname }}"

                - name: Create KVM guest
                  community.libvirt.virt:
                    xml: "{{ lookup('template', 'vm.xml.j2') }}"
                    command: define
                  vars:
                    guest_hostname: "{{ inventory_hostname }}"
                    guest_disk_format: qcow2
                    guest_disk_path: "{{ _pool }}/{{ inventory_hostname }}.img"
                    guest_iso_path: "{{ _pool }}/{{ inventory_hostname }}.iso"
                    guest_network: "{{ _network }}"
                    guest_mac: "{{ '52:54:00' | random_mac(seed=guest_hostname) }}"
                  loop_control:
                    label: "{{ inventory_hostname }} - {{ _pool }}/{{ inventory_hostname }}.img"

              always:
                - name: Destroy cloud-init tempdir
                  ansible.builtin.file:
                    dest: "{{ libvirt_tmpdir.path }}"
                    state: absent
                  when: false

        - name: Start KVM guest
          community.libvirt.virt:
            name: "{{ inventory_hostname }}"
            state: running


- name: Build instance config file
  hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    - name: Create ssh key
      community.crypto.openssh_keypair:
        path: "{{ lookup('ansible.builtin.env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/id_rsa"
      run_once: true
      register: _pubkey

    - name: Wait for dhcp lease assignment
      ansible.builtin.shell:
        cmd: "virsh net-dhcp-leases --network {{ _network }} | grep {{ item }}"
        executable: /bin/bash
      loop: "{{ molecule_yml.platforms | map(attribute='name') }}"
      register: dhcp_query
      retries: 6
      delay: 30
      until: dhcp_query is succeeded

    - name: Query dhcp leases
      ansible.builtin.shell: "virsh net-dhcp-leases --network {{ _network }} | grep {{ item }} | awk '{print $5}'"
      loop: "{{ molecule_yml.platforms | map(attribute='name') }}"
      register: dhcp_query

    - name: Populate instance config dict
      ansible.builtin.set_fact:
        instance_conf_dict: {
          'instance': "{{ item }}",
          'address': "{{ _address | ansible.utils.ipaddr('address') }}",
          'user': "{{ _user }}",
          'port': "22",
          'identity_file': "{{ _pubkey.filename }}"
        }
      vars:
        _addresses: "{{ dhcp_query.results | nephelaiio.plugins.list_to_dict('item') }}"
        _address: "{{ _addresses[item].stdout }}"
      loop: "{{ molecule_yml.platforms | map(attribute='name') }}"
      register: instance_config_dict

    - name: Convert instance config dict to a list
      ansible.builtin.set_fact:
        _instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump instance config
      ansible.builtin.copy:
        content: "{{ _instance_conf | ansible.builtin.to_nice_yaml(indent=2) }}"
        dest: "{{ molecule_instance_config }}"
