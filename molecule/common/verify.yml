---
- name: Verify tool installation
  hosts: rke_control
  any_errors_fatal: true
  vars_files:
    - ../../playbooks/vars/main.yml
  tasks:
    - name: Check kubectl deployment
      ansible.builtin.command: kubectl --help

    - name: Check Helm deployment
      ansible.builtin.command: helm --help

    - name: Check RKE binary
      ansible.builtin.command: rke --help

    - name: Stat kubeconfig file
      ansible.builtin.stat:
        path: "{{ _rke_config_user }}"
      register: _kubeconfig_stat

    - name: Check kubeconfig file
      ansible.builtin.assert:
        fail_msg: "Unable to locate kubeconfig file at path {{ _rke_config_user }}"
        that: _kubeconfig_stat.stat.exists

    - name: Stat cluster state file
      ansible.builtin.stat:
        path: "{{ rke_state_file }}"
      register: _clusterstate_stat

    - name: Check cluster state file
      ansible.builtin.assert:
        fail_msg: "Unable to locate kubeconfig file at path {{ rke_state_file }}"
        that: _clusterstate_stat.stat.exists


- name: Verify Docker install
  hosts: rke
  any_errors_fatal: true
  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Check Docker service
      ansible.builtin.assert:
        that: _service in services
      vars:
        _service: docker.service


- name: Verify multipath deactivation
  hosts: rke
  any_errors_fatal: true
  vars:
    _service_name: multipathd.service
  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Check multipath service
      ansible.builtin.assert:
        that: _service_name in services

    - name: Check multipath service status
      ansible.builtin.assert:
        that:
          - _service.state == _stopped
          - _service.status == _masked
      vars:
        _service: "{{ services[_service_name] }}"
        _stopped: "{{ (ansible_os_family == 'RedHat') | ternary('inactive', 'stopped') }}"
        _masked: "masked"

    - name: Verify multipath service mask
      block:
        - name: Attempt mask service start
          ansible.builtin.shell: >-
            systemctl start {{ _service_name }}
          register: _masked_start
          ignore_errors: true

        - name: Verify service mask
          ansible.builtin.assert:
            that:
              - _masked_start is failed
              - _masked_start.stderr | regex_search('.* ' + _service_name + ' is masked.')


- name: Verify RKE install
  hosts: rke_control
  any_errors_fatal: true
  tasks:
    - name: Install JQ
      ansible.builtin.package:
        name: jq
      become: true

    - name: Slurp kubeconfig file
      ansible.builtin.slurp:
        src: /opt/rke/kube_config_cluster.yml
      register: _kubeconfig_slurp

    - name: Verify kubeconfig api configuration
      ansible.builtin.assert:
        that: _kubeconfig_server == "https://localhost:6443"
      vars:
        _kubeconfig_content: "{{ _kubeconfig_slurp['content'] | b64decode | ansible.builtin.from_yaml }}"
        _kubeconfig_server: "{{ _kubeconfig_content.clusters[0].cluster.server }}"
      when: rke_api_url is defined

    - name: Query cluster nodes
      ansible.builtin.shell:
        cmd: "kubectl get node -o name | cut -d'/' -f2"
        executable: /bin/bash
      register: _kubectl_nodes

    - name: Verify cluster nodes
      block:
        - name: Check cluster node status
          ansible.builtin.assert:
            that: groups['rke'] | difference(_kubectl_nodes.stdout_lines) | length == 0
      rescue:
        - name: Debug node registrations
          ansible.builtin.debug:
            msg: "Found nodes [{{ ', '.join(_kubectl_nodes.stdout_lines) }}] registered to the cluster"

        - name: Debug unregistered nodes
          ansible.builtin.debug:
            msg: "Nodes [{{ ', '.join(_absent) }}] are not registered to the cluster"
          vars:
            _absent: "{{ groups['rke'] | difference(_kubectl_nodes.stdout_lines) }}"

        - name: Fail cluster node check
          ansible.builtin.fail:
          when: false

    - name: Query cluster status
      ansible.builtin.shell:
        cmd: "kubectl get cs -o json | jq '.items | map(.conditions | map(.type) | .[])'"
        executable: /bin/bash
      register: _kubectl_status

    - name: Check cluster status
      ansible.builtin.assert:
        that: _status | reject('equalto', 'Healthy') | length == 0
      vars:
        _status: "{{ _kubectl_status.stdout }}"
